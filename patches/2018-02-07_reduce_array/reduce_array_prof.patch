diff -Naur acse_1.1.3/acse/Acse.lex acse_1.1.3_reduce_array/acse/Acse.lex
--- acse_1.1.3/acse/Acse.lex	2018-02-02 12:38:54.243971788 +0100
+++ acse_1.1.3_reduce_array/acse/Acse.lex	2018-02-02 13:27:48.739913825 +0100
@@ -97,7 +97,7 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
-
+"red"             { return REDUCE; }
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
                     return(NUMBER); }
diff -Naur acse_1.1.3/acse/Acse.y acse_1.1.3_reduce_array/acse/Acse.y
--- acse_1.1.3/acse/Acse.y	2018-02-02 12:38:54.243971788 +0100
+++ acse_1.1.3_reduce_array/acse/Acse.y	2018-02-02 14:19:04.779853066 +0100
@@ -124,6 +124,7 @@
 %token RETURN
 %token READ
 %token WRITE
+%token REDUCE
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -484,6 +485,24 @@
                      /* free the memory associated with the IDENTIFIER */
                      free($1);
    }
+   | REDUCE LPAR IDENTIFIER RPAR {
+                     $$ = create_expression(getNewRegister(program),REGISTER);
+                     int i_reg = getNewRegister(program);
+                     t_axe_label* backedge;
+                     t_axe_variable* array = getVariable(program, $3);
+                     if(array->isArray == 0){
+                       exit(1);
+                     }
+                     gen_addi_instruction(program, i_reg, REG_0, array->arraySize);
+                     backedge = assignNewLabel(program);
+                     gen_subi_instruction(program, i_reg,i_reg,1);
+                     int elem_reg = loadArrayElement(program, $3,
+                                                     create_expression(i_reg,REGISTER) ); 
+                     gen_add_instruction(program, $$.value, $$.value, elem_reg, CG_DIRECT_ALL);
+                     gen_andb_instruction(program, i_reg, i_reg, i_reg, CG_DIRECT_ALL);
+                     gen_bne_instruction(program,backedge,0);
+                     free($3);
+   }
    | NOT_OP NUMBER   {  if ($2 == 0)
                            $$ = create_expression (1, IMMEDIATE);
                         else
