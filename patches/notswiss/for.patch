diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..1a3cac4 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -2,10 +2,10 @@
 /*
  * Andrea Di Biagio
  * Politecnico di Milano, 2007
- * 
+ *
  * Acse.y
  * Formal Languages & Compilers Machine, 2007/2008
- * 
+ *
  */
 
 /*************************************************************************
@@ -14,7 +14,7 @@
 
 ***************************************************************************/
 
-#include <stdio.h>       
+#include <stdio.h>
 #include <stdlib.h>
 #include <assert.h>
 #include "axe_struct.h"
@@ -66,13 +66,13 @@ extern int errorcode;   /* this variable is used to test if an error is found
                          * one or more syntax errors or because something went
                          * wrong in the machine internal state), the errorcode
                          * is set to a value that is different from `AXE_OK'. */
-                         
+
 
 extern int cflow_errorcode;   /* As for `errorcode' this value is used to
                         * test if an error occurs during the creation process of
                         * a control flow graph. More informations can be found
                         * analyzing the file `axe_cflow_graph.h'. */
-                     
+
 /* program informations */
 t_program_infos *program;  /* The singleton instance of `program'.
                             * An instance of `t_program_infos' holds in its
@@ -100,7 +100,7 @@ extern int yyerror(const char* errmsg);
                           SEMANTIC RECORDS
 =========================================================================*/
 
-%union {            
+%union {
    int intval;
    char *svalue;
    t_axe_expression expr;
@@ -108,9 +108,10 @@ extern int yyerror(const char* errmsg);
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
-} 
+   t_for_statement for_stmt;
+}
 /*=========================================================================
-                               TOKENS 
+                               TOKENS
 =========================================================================*/
 %start program
 
@@ -127,6 +128,7 @@ extern int yyerror(const char* errmsg);
 
 %token <label> DO
 %token <while_stmt> WHILE
+%token <for_stmt> FOR
 %token <label> IF
 %token <label> ELSE
 %token <intval> TYPE
@@ -158,7 +160,7 @@ extern int yyerror(const char* errmsg);
 /*=========================================================================
                          BISON GRAMMAR
 =========================================================================*/
-%% 
+%%
 
 /* `program' is the starting non-terminal of the grammar.
  * A program is composed by:
@@ -223,7 +225,7 @@ declaration : IDENTIFIER ASSIGN NUMBER
             {
                /* create a new instance of t_axe_declaration */
                $$ = alloc_declaration($1, 0, 0, 0);
-               
+
                /* test if an `out of memory' occurred */
                if ($$ == NULL)
                   notifyError(AXE_OUT_OF_MEMORY);
@@ -253,6 +255,7 @@ control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+            | for_statement              { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -290,7 +293,7 @@ assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
                 * `get_symbol_location' perform a query on the symbol table
                 * in order to discover the correct location of
                 * the variable with $1 as identifier */
-               
+
                /* get the location of the symbol with the given ID. */
                location = get_symbol_location(program, $1, 0);
 
@@ -308,7 +311,7 @@ assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
                free($1);
             }
 ;
-            
+
 if_statement   : if_stmt
                {
                   /* fix the `label_else' */
@@ -319,10 +322,10 @@ if_statement   : if_stmt
                   /* reserve a new label that points to the address where to jump if
                    * `exp' is verified */
                   $2 = newLabel(program);
-   
+
                   /* exit from the if-else */
                   gen_bt_instruction (program, $2, 0);
-   
+
                   /* fix the `label_else' */
                   assignLabel(program, $1);
                }
@@ -332,7 +335,7 @@ if_statement   : if_stmt
                   assignLabel(program, $2);
                }
 ;
-            
+
 if_stmt  :  IF
                {
                   /* the label that points to the address where to jump if
@@ -388,13 +391,13 @@ while_statement  : WHILE
                      assignLabel(program, $1.label_end);
                   }
 ;
-                  
+
 do_while_statement  : DO
                      {
                         /* the label that points to the address where to jump if
                          * `exp' is not verified */
                         $1 = newLabel(program);
-                        
+
                         /* fix the label */
                         assignLabel(program, $1);
                      }
@@ -411,6 +414,39 @@ do_while_statement  : DO
                      }
 ;
 
+for_statement : FOR
+                {
+                  $1 = create_for_statement();
+                  $1.block = newLabel(program);
+                  $1.out = newLabel(program);
+                }
+                LPAR assignments SEMI { $1.exp = assignNewLabel(program); }
+                exp SEMI
+                {
+                  if ($7.expression_type == IMMEDIATE)
+                    gen_load_immediate(program, $7.value);
+                  else
+                    gen_andb_instruction(program, $7.value, $7.value, $7.value, CG_DIRECT_ALL);
+                  gen_beq_instruction(program, $1.out, 0);
+                  gen_bt_instruction(program, $1.block, 0);
+                  $1.epilogue = assignNewLabel(program);
+                }
+                assignments RPAR
+                {
+                  gen_bt_instruction(program, $1.exp, 0);
+                  assignLabel(program, $1.block);
+                }
+                code_block
+                {
+                  gen_bt_instruction(program, $1.epilogue, 0);
+                  assignLabel(program, $1.out);
+                }
+;
+
+assignments : assignments COMMA assign_statement
+            | assign_statement
+;
+
 return_statement : RETURN
             {
                /* insert an HALT instruction */
@@ -418,14 +454,14 @@ return_statement : RETURN
             }
 ;
 
-read_statement : READ LPAR IDENTIFIER RPAR 
+read_statement : READ LPAR IDENTIFIER RPAR
             {
                int location;
-               
+
                /* read from standard input an integer value and assign
                 * it to a variable associated with the given identifier */
                /* get the location of the symbol with the given ID */
-               
+
                /* lookup the symbol table and fetch the register location
                 * associated with the IDENTIFIER $3. */
                location = get_symbol_location(program, $3, 0);
@@ -437,10 +473,10 @@ read_statement : READ LPAR IDENTIFIER RPAR
                free($3);
             }
 ;
-            
-write_statement : WRITE LPAR exp RPAR 
+
+write_statement : WRITE LPAR exp RPAR
             {
-   
+
                int location;
 
                if ($3.expression_type == IMMEDIATE)
@@ -460,10 +496,10 @@ write_statement : WRITE LPAR exp RPAR
 exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | IDENTIFIER  {
                      int location;
-   
+
                      /* get the location of the symbol with the given ID */
                      location = get_symbol_location(program, $1, 0);
-                     
+
                      /* return the register location of IDENTIFIER as
                       * a value for `exp' */
                      $$ = create_expression (location, REGISTER);
@@ -473,7 +509,7 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    }
    | IDENTIFIER LSQUARE exp RSQUARE {
                      int reg;
-                     
+
                      /* load the value IDENTIFIER[exp]
                       * into `arrayElement' */
                      reg = loadArrayElement(program, $1, $3);
@@ -492,7 +528,7 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | NOT_OP IDENTIFIER  {
                            int identifier_location;
                            int output_register;
-   
+
                            /* get the location of the symbol with the given ID */
                            identifier_location =
                                  get_symbol_location(program, $2, 0);
@@ -565,7 +601,7 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                            /* create an expression for regisrer REG_0 */
                            exp_r0.value = REG_0;
                            exp_r0.expression_type = REGISTER;
-                           
+
                            $$ = handle_bin_numeric_op
                                  (program, exp_r0, $2, SUB);
                         }
@@ -580,17 +616,17 @@ int main (int argc, char **argv)
 {
    /* initialize all the compiler data structures and global variables */
    init_compiler(argc, argv);
-   
+
    /* start the parsing procedure */
    yyparse();
-   
+
 #ifndef NDEBUG
    fprintf(stdout, "Parsing process completed. \n");
 #endif
 
    /* test if the parsing process completed succesfully */
    checkConsistency();
-   
+
 #ifndef NDEBUG
    fprintf(stdout, "Creating a control flow graph. \n");
 #endif
@@ -606,10 +642,10 @@ int main (int argc, char **argv)
    assert(file_infos->syTable_output != NULL);
    printSymbolTable(program->sy_table, file_infos->syTable_output);
    printGraphInfos(graph, file_infos->cfg_1, 0);
-      
+
    fprintf(stdout, "Updating the basic blocks. \n");
 #endif
-      
+
    /* update the control flow graph by inserting load and stores inside
    * every basic block */
    graph = insertLoadAndStoreInstr(program, graph);
@@ -623,17 +659,17 @@ int main (int argc, char **argv)
 #ifndef NDEBUG
    printGraphInfos(graph, file_infos->cfg_2, 1);
 #endif
-      
+
 #ifndef NDEBUG
    fprintf(stdout, "Starting the register allocation process. \n");
 #endif
    /* initialize the register allocator by using the control flow
     * informations stored into the control flow graph */
    RA = initializeRegAlloc(graph);
-      
+
    /* execute the linear scan algorythm */
    execute_linear_scan(RA);
-      
+
 #ifndef NDEBUG
    printRegAllocInfos(RA, file_infos->reg_alloc_output);
 #endif
@@ -649,11 +685,11 @@ int main (int argc, char **argv)
    fprintf(stdout, "Writing the assembly file... \n");
 #endif
    writeAssembly(program, file_infos->output_file_name);
-      
+
 #ifndef NDEBUG
    fprintf(stdout, "Assembly written on file \"%s\".\n", file_infos->output_file_name);
 #endif
-   
+
    /* shutdown the compiler */
    shutdownCompiler(0);
 
@@ -666,6 +702,6 @@ int main (int argc, char **argv)
 int yyerror(const char* errmsg)
 {
    errorcode = AXE_SYNTAX_ERROR;
-   
+
    return 0;
 }
diff --git a/acse/axe_struct.c b/acse/axe_struct.c
index b2761a0..c7bd497 100644
--- a/acse/axe_struct.c
+++ b/acse/axe_struct.c
@@ -100,6 +100,18 @@ t_while_statement create_while_statement()
    return statement;
 }
 
+t_for_statement create_for_statement()
+{
+   t_for_statement statement;
+   
+   statement.exp = NULL;
+   statement.epilogue = NULL;
+   statement.block = NULL;
+   statement.out = NULL;
+
+   return statement;
+}
+
 t_axe_label * alloc_label(int value)
 {
    t_axe_label *result;
diff --git a/acse/axe_struct.h b/acse/axe_struct.h
index 47663cc..16df33f 100644
--- a/acse/axe_struct.h
+++ b/acse/axe_struct.h
@@ -114,6 +114,14 @@ typedef struct t_while_statement
                                     * that follows the while construct */
 } t_while_statement;
 
+typedef struct t_for_statement
+{
+   t_axe_label *exp;
+   t_axe_label *epilogue;
+   t_axe_label *block;
+   t_axe_label *out;
+} t_for_statement;
+
 /* create a label */
 extern t_axe_label * alloc_label(int value);
 
@@ -123,6 +131,9 @@ extern t_axe_expression create_expression (int value, int type);
 /* create an instance that will mantain infos about a while statement */
 extern t_while_statement create_while_statement();
 
+/* create an instance that will mantain infos about a for statement */
+extern t_for_statement create_for_statement();
+
 /* create an instance of `t_axe_register' */
 extern t_axe_register * alloc_register(int ID, int indirect);
 
diff --git a/tests/Makefile b/tests/Makefile
index a3aed3b..ed51557 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,7 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc
+dirs:=for
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/for/test.src b/tests/for/test.src
new file mode 100644
index 0000000..d91c6e1
--- /dev/null
+++ b/tests/for/test.src
@@ -0,0 +1,5 @@
+int i;
+
+for(i=0; i < 10; i=i+1) {
+  write(i);
+}
