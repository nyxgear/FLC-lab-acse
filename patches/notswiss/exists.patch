diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..c17d5f9 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,7 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"exists"          { return EXISTS; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index 57ff107..a047fa4 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -93,6 +93,11 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+char *id;
+int i;
+int found;
+int isOver;
+
 %}
 %expect 1
 
@@ -125,6 +130,7 @@ extern int yyerror(const char* errmsg);
 %token READ
 %token WRITE
 
+%token <label> EXISTS
 %token <label> DO
 %token <while_stmt> WHILE
 %token <label> IF
@@ -462,12 +468,16 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      int location;
    
                      /* get the location of the symbol with the given ID */
-                     location = get_symbol_location(program, $1, 0);
+                     if(!id || strcmp($1, id)) {
+                      location = get_symbol_location(program, $1, 0);
+                     
                      
                      /* return the register location of IDENTIFIER as
                       * a value for `exp' */
-                     $$ = create_expression (location, REGISTER);
-
+                      $$ = create_expression (location, REGISTER);
+                     } else {
+                      $$ = create_expression (i, REGISTER); 
+                     }
                      /* free the memory associated with the IDENTIFIER */
                      free($1);
    }
@@ -477,7 +487,11 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      /* load the value IDENTIFIER[exp]
                       * into `arrayElement' */
                      reg = loadArrayElement(program, $1, $3);
-
+                     if (id) {
+                      t_axe_variable *arr = getVariable(program, $1);
+                      gen_subi_instruction(program, isOver, i, arr->arraySize);
+                      gen_notl_instruction(program, isOver, isOver);
+                     }
                      /* create a new expression */
                      $$ = create_expression (reg, REGISTER);
 
@@ -570,6 +584,28 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                                  (program, exp_r0, $2, SUB);
                         }
                      }
+  | EXISTS IDENTIFIER LPAR
+  {
+    if(id) exit(-1);
+    id = $2;
+    found = gen_load_immediate(program, 0);
+    i = gen_load_immediate(program, 0);
+    isOver = gen_load_immediate(program, 0);
+    $1 = assignNewLabel(program);
+  }
+  exp RPAR 
+  {
+    gen_addi_instruction(program, i, i, 1);
+    if ($5.expression_type == IMMEDIATE)
+      gen_orli_instruction(program, found, found, $5.value);
+    else
+      gen_orl_instruction(program, found, found, $5.value, CG_DIRECT_ALL);
+    gen_orl_instruction(program, isOver, isOver, found, CG_DIRECT_ALL);
+    gen_beq_instruction(program, $1, 0);  /* Loops until a result is found or iteration is over */
+    free(id);
+    id = NULL;
+    $$ = create_expression(found, REGISTER);
+  }
 ;
 
 %%
diff --git a/tests/Makefile b/tests/Makefile
index ebbebd6..b3402e5 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,7 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc exists
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/exists/exists.src b/tests/exists/exists.src
new file mode 100644
index 0000000..3ecfbfb
--- /dev/null
+++ b/tests/exists/exists.src
@@ -0,0 +1,23 @@
+int a[5];
+
+int x = 3;
+
+a[0] = 0; a[1] = 1; a[2] = 2; a[3] = 3; a[4] = 4;
+
+if ( exists i (a[i]>2) ) write(1);
+
+else write(0);
+
+// it prints 1
+
+if ( exists i (a[x]>2) ) write(1);
+
+else write(0);
+
+// it prints 1
+
+if ( exists x (a[x]>10) ) write(1);
+
+else write(0);
+
+// it prints 0
