diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..6e779ba 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -98,6 +98,13 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "read"            { return READ; }
 "write"           { return WRITE; }
 
+"push"            { return PUSH; }
+"into"            { return INTO; }
+"pop"             { return POP; }
+"from"            { return FROM; }
+"is-empty"        { return ISEMPTY; }
+"is-full"         { return ISFULL; }
+
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
                     return(NUMBER); }
diff --git a/acse/Acse.y b/acse/Acse.y
index 57ff107..c73e142 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -93,6 +93,8 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+t_list *stack;
+
 %}
 %expect 1
 
@@ -124,6 +126,7 @@ extern int yyerror(const char* errmsg);
 %token RETURN
 %token READ
 %token WRITE
+%token PUSH INTO POP FROM ISEMPTY ISFULL
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -246,9 +249,66 @@ statements  : statements statement       { /* does nothing */ }
 statement   : assign_statement SEMI      { /* does nothing */ }
             | control_statement          { /* does nothing */ }
             | read_write_statement SEMI  { /* does nothing */ }
+            | stack_statement SEMI
             | SEMI            { gen_nop_instruction(program); }
 ;
 
+stack_statement : PUSH exp INTO IDENTIFIER
+                {
+                   t_axe_variable *arr = getVariable(program, $4);
+                   if(!arr->isArray) exit(-1);
+                   if(arr->arraySize == getLength(stack)) exit(-1);
+                   t_axe_expression *ptr = malloc(sizeof(t_axe_expression));
+                   *ptr = $2;
+                   stack = addFirst(stack, ptr);
+                   /* for (i = size - 1; i > 0; i--) arr[i] = arr[i-1]*/
+                   int i = gen_load_immediate(program, arr->arraySize - 1);
+                   t_axe_expression i_exp = create_expression(i, REGISTER);
+                   int temp = getNewRegister(program);
+                   t_axe_expression temp_exp = create_expression(temp, REGISTER);
+                   t_axe_label *loop = assignNewLabel(program);
+                   t_axe_label *out = newLabel(program);
+                   gen_addi_instruction(program, temp, i, 0);
+                   gen_ble_instruction(program, out, 0);
+                   gen_addi_instruction(program, temp, i, 0);
+                   gen_subi_instruction(program, i, i, 1);
+                   int v = loadArrayElement(program, $4, i_exp);
+                   storeArrayElement(program, $4, temp_exp, create_expression(v, REGISTER));
+                   gen_bt_instruction(program, loop, 0);
+                   assignLabel(program, out);
+                   storeArrayElement(program, $4, create_expression(0, IMMEDIATE), $2);
+                }
+                | POP IDENTIFIER FROM IDENTIFIER
+                {
+                   t_axe_variable *arr = getVariable(program, $4);
+                   if(!arr->isArray) exit(-1);
+                   if(getLength(stack) == 0) exit(-1);
+                   t_axe_expression *ptr = (t_axe_expression *) getElementAt(stack, 0)->data;
+                   t_axe_expression e = *ptr;
+                   stack = removeFirst(stack);
+                   int location = get_symbol_location(program, $2, 0);
+                   if (e.expression_type == IMMEDIATE)
+                     gen_addi_instruction(program, location, REG_0, e.value);
+                   else
+                     gen_add_instruction(program, location, REG_0, e.value, CG_DIRECT_ALL);
+                   /* for (i=0; i < size - 1; i++) arr[i] = arr[i+1] */
+                   int i = gen_load_immediate(program, 0);
+                   t_axe_expression i_exp = create_expression(i, REGISTER);
+                   int temp = getNewRegister(program);
+                   t_axe_expression temp_exp = create_expression(temp, REGISTER);
+                   t_axe_label *end = newLabel(program);
+                   t_axe_label *loop = assignNewLabel(program);
+                   gen_subi_instruction(program, temp, i, arr->arraySize + 1);
+                   gen_bge_instruction(program, end, 0);
+                   gen_addi_instruction(program, temp, i, 0);
+                   gen_addi_instruction(program, i, i, 1);
+                   int v = loadArrayElement(program, $4, i_exp);
+                   storeArrayElement(program, $4, temp_exp, create_expression(v, REGISTER));
+                   gen_bt_instruction(program, loop, 0);
+                   assignLabel(program, end);
+                }
+;
+
 control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
@@ -551,6 +611,21 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | exp SHR_OP exp  {  $$ = handle_bin_numeric_op(program, $1, $3, SHR); }
    | exp ANDAND exp  {  $$ = handle_bin_numeric_op(program, $1, $3, ANDL); }
    | exp OROR exp    {  $$ = handle_bin_numeric_op(program, $1, $3, ORL); }
+   | ISEMPTY IDENTIFIER 
+   {
+      t_axe_expression result = handle_binary_comparison(program, create_expression(0, IMMEDIATE), create_expression(getLength(stack), IMMEDIATE), _EQ_);
+      int temp = gen_load_immediate(program, result.value);
+      $$ = create_expression(temp, REGISTER);
+      /* Why does $$ = result; not work? */
+   }
+   | ISFULL IDENTIFIER 
+   {
+      t_axe_variable *arr = getVariable(program, $2);
+      if(!arr->isArray) exit(-1);
+      t_axe_expression result = handle_binary_comparison(program, create_expression(arr->arraySize, IMMEDIATE), create_expression(getLength(stack), IMMEDIATE), _EQ_);
+      int temp = gen_load_immediate(program, result.value);
+      $$ = create_expression(temp, REGISTER);
+   }
    | LPAR exp RPAR   { $$ = $2; }
    | MINUS exp       {
                         if ($2.expression_type == IMMEDIATE)
diff --git a/tests/Makefile b/tests/Makefile
index ebbebd6..9c95243 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,7 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc pushpop
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/pushpop/pushpop.src b/tests/pushpop/pushpop.src
new file mode 100644
index 0000000..3c2a1ba
--- /dev/null
+++ b/tests/pushpop/pushpop.src
@@ -0,0 +1,20 @@
+int a[5];
+int x, y, z;
+
+read(x);
+read(y);
+
+push (x+1) into a;
+push y*x into a;
+
+
+pop z from a;
+write(z);
+pop z from a;
+write(z);
+
+
+if (is-empty a)
+  write(1);     
+else
+  write(0);
