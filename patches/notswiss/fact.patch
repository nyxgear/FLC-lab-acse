diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..713c2ab 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -114,9 +114,10 @@ extern int yyerror(const char* errmsg);
 =========================================================================*/
 %start program
 
+%token NOT_OP
 %token LBRACE RBRACE LPAR RPAR LSQUARE RSQUARE
 %token SEMI COLON PLUS MINUS MUL_OP DIV_OP MOD_OP
-%token AND_OP OR_OP NOT_OP
+%token AND_OP OR_OP
 %token ASSIGN LT GT SHL_OP SHR_OP EQ NOTEQ LTEQ GTEQ
 %token ANDAND OROR
 %token COMMA
@@ -153,6 +154,7 @@ extern int yyerror(const char* errmsg);
 %left SHL_OP SHR_OP
 %left MINUS PLUS
 %left MUL_OP DIV_OP
+%left NOT_OP
 %right NOT
 
 /*=========================================================================
@@ -457,7 +459,32 @@ write_statement : WRITE LPAR exp RPAR
             }
 ;
 
-exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
+exp: 
+   exp NOT_OP
+   {
+      if ($1.expression_type == IMMEDIATE) {
+        int result = 1;
+        for(int i = $1.value; i > 1; i--) {
+          result *= i;
+        }
+        $$ = create_expression(result, IMMEDIATE);
+      } else {
+        int i = getNewRegister(program);
+        int result = gen_load_immediate(program, 1);
+        gen_addi_instruction(program, i, $1.value, 0);
+        t_axe_label *loop = assignNewLabel(program);
+        int temp = getNewRegister(program);
+        gen_subi_instruction(program, temp, i, 1);
+        t_axe_label *out = newLabel(program);
+        gen_ble_instruction(program, out, 0);
+        gen_mul_instruction(program, result, result, i, CG_DIRECT_ALL);
+        gen_subi_instruction(program, i, i, 1);
+        gen_bgt_instruction(program, loop, 0);
+        assignLabel(program, out);
+        $$ = create_expression(result, REGISTER);
+      }
+   }
+   | NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | IDENTIFIER  {
                      int location;
    
@@ -484,33 +511,6 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      /* free the memory associated with the IDENTIFIER */
                      free($1);
    }
-   | NOT_OP NUMBER   {  if ($2 == 0)
-                           $$ = create_expression (1, IMMEDIATE);
-                        else
-                           $$ = create_expression (0, IMMEDIATE);
-   }
-   | NOT_OP IDENTIFIER  {
-                           int identifier_location;
-                           int output_register;
-   
-                           /* get the location of the symbol with the given ID */
-                           identifier_location =
-                                 get_symbol_location(program, $2, 0);
-
-                           /* generate a NOT instruction. In order to do this,
-                            * at first we have to ask for a free register where
-                            * to store the result of the NOT instruction. */
-                           output_register = getNewRegister(program);
-
-                           /* Now we are able to generate a NOT instruction */
-                           gen_notl_instruction (program, output_register
-                                 , identifier_location);
-
-                           $$ = create_expression (output_register, REGISTER);
-
-                           /* free the memory associated with the IDENTIFIER */
-                           free($2);
-   }
    | exp AND_OP exp     {
                            $$ = handle_bin_numeric_op(program, $1, $3, ANDB);
    }
diff --git a/tests/fact/fact.src b/tests/fact/fact.src
index 9213560..d9614eb 100644
--- a/tests/fact/fact.src
+++ b/tests/fact/fact.src
@@ -4,12 +4,13 @@ read(value);
 
 if (value < 0)
 {
-	write(-1);
 	return;
 }
 
 fact = 1;
 
+write(value!);
+
 while(value > 0)
 {
 	fact = value * fact;
