diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..38e581f 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,7 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"alias"           { return ALIAS; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index 57ff107..0933f61 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -93,6 +93,8 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+char *alias = NULL;
+char *aliased = NULL;
 %}
 %expect 1
 
@@ -125,6 +127,7 @@ extern int yyerror(const char* errmsg);
 %token READ
 %token WRITE
 
+%token ALIAS
 %token <label> DO
 %token <while_stmt> WHILE
 %token <label> IF
@@ -253,6 +256,7 @@ control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+            | alias_statement
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -267,7 +271,10 @@ assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
                 * the array/pointer identifier, $3 is an expression
                 * that holds an integer value. That value will be
                 * used as an index for the array $1 */
-               storeArrayElement(program, $1, $3, $6);
+               if(!alias || strcmp($1, alias))
+                storeArrayElement(program, $1, $3, $6);
+               else
+                storeArrayElement(program, aliased, $3, $6);
 
                /* free the memory associated with the IDENTIFIER.
                 * The use of the free instruction is required
@@ -292,7 +299,10 @@ assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
                 * the variable with $1 as identifier */
                
                /* get the location of the symbol with the given ID. */
-               location = get_symbol_location(program, $1, 0);
+               if(!alias || strcmp($1, alias))
+                location = get_symbol_location(program, $1, 0);
+               else
+                location = get_symbol_location(program, aliased, 0);
 
                /* update the value of location */
                if ($3.expression_type == IMMEDIATE)
@@ -418,6 +428,24 @@ return_statement : RETURN
             }
 ;
 
+alias_statement : ALIAS IDENTIFIER IDENTIFIER 
+                {
+                  if(alias) {
+                    puts("Do not nest pls");
+                    exit(-1);
+                  }
+                  alias = $2;
+                  aliased = $3;
+                }
+                code_block
+                {
+                  free(alias);
+                  alias = NULL;
+                  free(aliased);
+                  aliased = NULL;
+                }
+;
+
 read_statement : READ LPAR IDENTIFIER RPAR 
             {
                int location;
@@ -428,7 +456,10 @@ read_statement : READ LPAR IDENTIFIER RPAR
                
                /* lookup the symbol table and fetch the register location
                 * associated with the IDENTIFIER $3. */
-               location = get_symbol_location(program, $3, 0);
+               if(!alias || strcmp(alias, $3))
+                location = get_symbol_location(program, $3, 0);
+               else
+                location = get_symbol_location(program, aliased, 0);
 
                /* insert a read instruction */
                gen_read_instruction (program, location);
@@ -462,7 +493,7 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      int location;
    
                      /* get the location of the symbol with the given ID */
-                     location = get_symbol_location(program, $1, 0);
+                     location = get_symbol_location(program, (!alias || strcmp(alias, $1)) ? $1 : aliased, 0);
                      
                      /* return the register location of IDENTIFIER as
                       * a value for `exp' */
@@ -476,7 +507,7 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      
                      /* load the value IDENTIFIER[exp]
                       * into `arrayElement' */
-                     reg = loadArrayElement(program, $1, $3);
+                     reg = loadArrayElement(program, (!alias || strcmp(alias, $1)) ? $1 : aliased, $3);
 
                      /* create a new expression */
                      $$ = create_expression (reg, REGISTER);
diff --git a/tests/Makefile b/tests/Makefile
index ebbebd6..21eb7b6 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,7 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile mult_table power semi assign arrays arrays2 misc alias
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/alias/alias.src b/tests/alias/alias.src
new file mode 100644
index 0000000..6a22476
--- /dev/null
+++ b/tests/alias/alias.src
@@ -0,0 +1,11 @@
+int a,b,c;
+
+a=3;
+b=5;
+c=7;
+
+alias a b {
+a=a+1-c;
+}
+write(a);
+write(b);
