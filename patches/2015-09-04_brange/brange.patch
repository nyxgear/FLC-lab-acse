diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..3f2563a 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,7 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"brange"          { return BRANGE; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..9d33f10 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -124,6 +124,7 @@ extern int yyerror(const char* errmsg);
 %token RETURN
 %token READ
 %token WRITE
+%token BRANGE
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -511,6 +512,52 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                            /* free the memory associated with the IDENTIFIER */
                            free($2);
    }
+   | BRANGE LPAR exp COMMA exp COMMA exp RPAR
+                   {
+                        t_axe_expression val_exp, lo_exp, hi_exp;
+                        if ($3.expression_type == IMMEDIATE)
+                            val_exp = create_expression(gen_load_immediate(program, $3.value), REGISTER);
+                        else
+                            val_exp = $3;
+
+                        if ($5.expression_type == IMMEDIATE)
+                            lo_exp = create_expression(gen_load_immediate(program, $5.value), REGISTER);
+                        else
+                            lo_exp = $5;
+
+                        if ($7.expression_type == IMMEDIATE)
+                            hi_exp = create_expression(gen_load_immediate(program, $7.value), REGISTER);
+                        else
+                            hi_exp = $7;
+
+                        t_axe_label *end_with_zero = newLabel(program);
+                        handle_binary_comparison(program, lo_exp, hi_exp, _GT_);
+                        gen_bne_instruction(program, end_with_zero, 0);
+
+                        handle_binary_comparison(program, lo_exp, create_expression(0, IMMEDIATE), _LT_);
+                        gen_bne_instruction(program, end_with_zero, 0);
+
+                        handle_binary_comparison(program, hi_exp, create_expression(31, IMMEDIATE), _GT_);
+                        gen_bne_instruction(program, end_with_zero, 0);
+
+                        t_axe_expression left_pad =
+                            handle_bin_numeric_op(program, hi_exp, lo_exp, SUB);
+
+                        int mask_hi = getNewRegister(program);
+                        gen_shr_instruction(program, mask_hi,
+                                            gen_load_immediate(program, 1),
+                                            left_pad.value,
+                                            CG_DIRECT_ALL);
+                        int vreg = getNewRegister(program);
+                        gen_shl_instruction(program, vreg, val_exp.value, lo_exp.value, CG_DIRECT_ALL);
+                        gen_andb_instruction(program, vreg, vreg, mask_hi, CG_DIRECT_ALL);
+                        t_axe_label *end = newLabel(program);
+                        gen_bt_instruction(program, end, 0);
+                        assignLabel(program, end_with_zero);
+                        gen_addi_instruction(program, vreg, REG_0, 0);
+                        assignLabel(program, end);
+                        $$ = create_expression(vreg, REGISTER);
+                   }
    | exp AND_OP exp     {
                            $$ = handle_bin_numeric_op(program, $1, $3, ANDB);
    }
diff --git a/tests/Makefile b/tests/Makefile
index a3aed3b..4f9c38d 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,8 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc \
+brange
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/brange/brange.src b/tests/brange/brange.src
new file mode 100644
index 0000000..d965451
--- /dev/null
+++ b/tests/brange/brange.src
@@ -0,0 +1,9 @@
+int v, r;
+
+v = 11584;
+
+// let assume that v = 11584
+r = 42 + brange(v, 2, 12);
+// r = 42 + 848 = 890
+
+write(r);
