diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..ab7324e 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,8 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"protect"         { return PROTECT; }
+"with"            { return WITH; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..aae83aa 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -93,6 +93,9 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+t_list * protect_stack = NULL;
+int is_protected = 0;
+
 %}
 %expect 1
 
@@ -124,6 +127,7 @@ extern int yyerror(const char* errmsg);
 %token RETURN
 %token READ
 %token WRITE
+%token WITH
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -133,10 +137,13 @@ extern int yyerror(const char* errmsg);
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
 
+%token <label> PROTECT
+
 %type <expr> exp
 %type <decl> declaration
 %type <list> declaration_list
 %type <label> if_stmt
+%type <label> protect_stmt
 
 /*=========================================================================
                           OPERATOR PRECEDENCES
@@ -236,6 +243,8 @@ code_block  : statement                  { /* does nothing */ }
             | LBRACE statements RBRACE   { /* does nothing */ }
 ;
 
+protected_code_block : { is_protected = 1; } LBRACE statements RBRACE { is_protected = 0; }
+
 /* One or more code statements */
 statements  : statements statement       { /* does nothing */ }
             | statement                  { /* does nothing */ }
@@ -253,6 +262,7 @@ control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+            | protect_statement          { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -353,6 +363,27 @@ if_stmt  :  IF
                code_block { $$ = $1; }
 ;
 
+protect_statement: protect_stmt
+                   {
+                      /* fix the `label_else' */
+                      assignLabel(program, $1);
+                   }
+                   | protect_stmt WITH
+                   {
+                      /* fix the `label_else' */
+                    assignLabel(program, $1);
+                   } code_block
+
+protect_stmt: PROTECT
+            {
+                $1 = newLabel(program);
+                protect_stack = addFirst(protect_stack, &$1);
+            }
+            protected_code_block
+            {
+                $$ = $1;
+            }
+
 while_statement  : WHILE
                   {
                      /* initialize the value of the non-terminal */
@@ -527,7 +558,20 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                            $$ = handle_bin_numeric_op(program, $1, $3, MUL);
    }
    | exp DIV_OP exp     {
-                           $$ = handle_bin_numeric_op(program, $1, $3, DIV);
+        if (is_protected) {
+            if (!protect_stack) notifyError(AXE_UNKNOWN_ERROR);
+
+            if ($3.expression_type == IMMEDIATE && $3.value == 0) {
+                gen_bt_instruction(program, (t_axe_label *) LDATA(protect_stack), 0);
+                protect_stack = removeFirst(protect_stack);
+            }
+            else if ($3.expression_type == REGISTER) {
+                gen_andb_instruction(program, $3.value, $3.value, $3.value, CG_DIRECT_ALL);
+                gen_beq_instruction(program, (t_axe_label *) LDATA(protect_stack), 0);
+                protect_stack = removeFirst(protect_stack);
+            }
+        }
+        $$ = handle_bin_numeric_op(program, $1, $3, DIV);
    }
    | exp LT exp      {
                         $$ = handle_binary_comparison (program, $1, $3, _LT_);
diff --git a/tests/Makefile b/tests/Makefile
index a3aed3b..722f9e0 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,8 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc \
+protect_with
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/protect_with/protect_with.src b/tests/protect_with/protect_with.src
new file mode 100644
index 0000000..638c496
--- /dev/null
+++ b/tests/protect_with/protect_with.src
@@ -0,0 +1,20 @@
+int a, b;
+a = 12;
+b = 6;
+
+protect{
+	write(a/b);
+	
+	protect{
+		write(a/(b-1));
+	}
+	with{
+		a = a/(a-b);
+	}
+}
+with{
+	protect{
+		write(a/(b+1));
+	}
+}
+
