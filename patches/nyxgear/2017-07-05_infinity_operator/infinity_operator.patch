diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..a6c82ec 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -98,10 +98,15 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "read"            { return READ; }
 "write"           { return WRITE; }
 
+"+infny"          { yylval.intval=+1; return PLUS_INFNY; }
+"-infny"          { yylval.intval=-1; return MINUS_INFNY; }
+"NaN"             { return UNDEFINED; }
+
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
                     return(NUMBER); }
 
+
 .                 { yyerror("Error: unexpected token");
                     num_error++;
                     return (-1); /* invalid token */
diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..4413745 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -116,6 +116,7 @@ extern int yyerror(const char* errmsg);
 
 %token LBRACE RBRACE LPAR RPAR LSQUARE RSQUARE
 %token SEMI COLON PLUS MINUS MUL_OP DIV_OP MOD_OP
+%token UNDEFINED PLUS_INFNY MINUS_INFNY
 %token AND_OP OR_OP NOT_OP
 %token ASSIGN LT GT SHL_OP SHR_OP EQ NOTEQ LTEQ GTEQ
 %token ANDAND OROR
@@ -458,6 +459,9 @@ write_statement : WRITE LPAR exp RPAR
 ;
 
 exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
+   | PLUS_INFNY  { $$ = create_expression ($1, INFINITY); }
+   | MINUS_INFNY { $$ = create_expression ($1, INFINITY); }
+   | UNDEFINED   { $$ = create_expression (0, UNDEFINED); }
    | IDENTIFIER  {
                      int location;
    
@@ -536,7 +540,17 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                         $$ = handle_binary_comparison (program, $1, $3, _GT_);
    }
    | exp EQ exp      {
-                        $$ = handle_binary_comparison (program, $1, $3, _EQ_);
+      if ($1.expression_type == UNDEFINED || $3.expression_type == UNDEFINED) {
+           $$ = create_expression(0, UNDEFINED);
+      }
+      else if (($1.expression_type == INFINITY && $3.expression_type != INFINITY) ||
+               ($1.expression_type != INFINITY && $3.expression_type == INFINITY) ) {
+
+        $$ = handle_binary_comparison (program, create_expression(1, IMMEDIATE),
+                                       create_expression(2, IMMEDIATE), _EQ_);
+      } else {
+              $$ = handle_binary_comparison (program, $1, $3, _EQ_);
+      }
    }
    | exp NOTEQ exp   {
                         $$ = handle_binary_comparison (program, $1, $3, _NOTEQ_);
diff --git a/acse/axe_constants.h b/acse/axe_constants.h
index 6ddabc4..9292318 100644
--- a/acse/axe_constants.h
+++ b/acse/axe_constants.h
@@ -142,6 +142,8 @@
 /* EXPRESSION TYPES */
 #define IMMEDIATE 0
 #define REGISTER 1
+#define INFINITY 2
+#define UNDEFINED 3
 #define INVALID_EXPRESSION -1
 
 /* binary comparison constants */
