diff -Naur acse_1.1.2/acse/Acse.lex acse_1.1.2_alias/acse/Acse.lex
--- acse_1.1.2/acse/Acse.lex	2017-12-12 12:04:39.000000000 +0100
+++ acse_1.1.2_alias/acse/Acse.lex	2018-06-20 17:48:51.650556066 +0200
@@ -97,6 +97,7 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"alias"           { return ALIAS; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff -Naur acse_1.1.2/acse/Acse.y acse_1.1.2_alias/acse/Acse.y
--- acse_1.1.2/acse/Acse.y	2017-12-12 12:04:19.000000000 +0100
+++ acse_1.1.2_alias/acse/Acse.y	2018-06-20 18:37:17.490599035 +0200
@@ -93,6 +93,8 @@
 extern int yylex(void);
 extern int yyerror(const char* errmsg);
 
+char *aliased_var = NULL;
+char *alias_var = NULL;
 %}
 %expect 1
 
@@ -132,6 +134,7 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
+%token ALIAS
 
 %type <expr> exp
 %type <decl> declaration
@@ -246,6 +249,7 @@
 statement   : assign_statement SEMI      { /* does nothing */ }
             | control_statement          { /* does nothing */ }
             | read_write_statement SEMI  { /* does nothing */ }
+            | alias_statement            {                    }
             | SEMI            { gen_nop_instruction(program); }
 ;
 
@@ -255,6 +259,19 @@
             | return_statement SEMI      { /* does nothing */ }
 ;
 
+alias_statement : ALIAS IDENTIFIER IDENTIFIER {
+                  if(alias_var != NULL) {
+                    puts("Nested alias construct not allowed\n");
+                    exit(-1);  
+                  }
+                  alias_var = $2;
+                  aliased_var = $3;
+                } code_block {
+                  free(alias_var); alias_var = NULL;
+                  free(aliased_var); aliased_var = NULL;
+                };
+
+
 read_write_statement : read_statement  { /* does nothing */ }
                      | write_statement { /* does nothing */ }
 ;
@@ -267,8 +284,11 @@
                 * the array/pointer identifier, $3 is an expression
                 * that holds an integer value. That value will be
                 * used as an index for the array $1 */
-               storeArrayElement(program, $1, $3, $6);
-
+               if( alias_var != NULL && strcmp($1,alias_var) == 0) {
+                   storeArrayElement(program, aliased_var, $3, $6);
+               } else {
+                 storeArrayElement(program, $1, $3, $6);
+               }
                /* free the memory associated with the IDENTIFIER.
                 * The use of the free instruction is required
                 * because of the value associated with IDENTIFIER.
@@ -292,8 +312,11 @@
                 * the variable with $1 as identifier */
                
                /* get the location of the symbol with the given ID. */
-               location = get_symbol_location(program, $1, 0);
-
+               if( alias_var != NULL && strcmp($1,alias_var) == 0) {
+                   location = get_symbol_location(program, aliased_var, 0);
+               } else {
+                   location = get_symbol_location(program, $1, 0);
+               }
                /* update the value of location */
                if ($3.expression_type == IMMEDIATE)
                   gen_move_immediate(program, location, $3.value);
@@ -428,8 +451,12 @@
                
                /* lookup the symbol table and fetch the register location
                 * associated with the IDENTIFIER $3. */
-               location = get_symbol_location(program, $3, 0);
 
+               if( alias_var != NULL && strcmp($3,alias_var) == 0) {
+                   location = get_symbol_location(program, aliased_var, 0);
+               } else {
+                   location = get_symbol_location(program, $3, 0);
+               }
                /* insert a read instruction */
                gen_read_instruction (program, location);
 
@@ -462,8 +489,11 @@
                      int location;
    
                      /* get the location of the symbol with the given ID */
-                     location = get_symbol_location(program, $1, 0);
-                     
+                     if( alias_var != NULL && strcmp($1,alias_var) == 0) {
+                        location = get_symbol_location(program, aliased_var, 0);
+                     } else {
+                        location = get_symbol_location(program, $1, 0);
+                     }
                      /* return the register location of IDENTIFIER as
                       * a value for `exp' */
                      $$ = create_expression (location, REGISTER);
@@ -476,8 +506,11 @@
                      
                      /* load the value IDENTIFIER[exp]
                       * into `arrayElement' */
-                     reg = loadArrayElement(program, $1, $3);
-
+                     if( alias_var != NULL && strcmp($1,alias_var) == 0) {
+                        reg = loadArrayElement(program, aliased_var, $3);
+                     } else {
+                        reg = loadArrayElement(program, $1, $3);
+                     }
                      /* create a new expression */
                      $$ = create_expression (reg, REGISTER);
 
@@ -494,9 +527,11 @@
                            int output_register;
    
                            /* get the location of the symbol with the given ID */
-                           identifier_location =
-                                 get_symbol_location(program, $2, 0);
-
+                           if( alias_var != NULL && strcmp($2,alias_var) == 0) {
+                              identifier_location = get_symbol_location(program, aliased_var, 0);
+                           } else {
+                              identifier_location = get_symbol_location(program, $2, 0);
+                           }
                            /* generate a NOT instruction. In order to do this,
                             * at first we have to ask for a free register where
                             * to store the result of the NOT instruction. */
diff -Naur acse_1.1.2/tests/alias/test.acse acse_1.1.2_alias/tests/alias/test.acse
--- acse_1.1.2/tests/alias/test.acse	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.2_alias/tests/alias/test.acse	2018-06-20 17:52:54.038559650 +0200
@@ -0,0 +1,11 @@
+int a,b,c;
+
+a=3;
+b=5;
+c=7;
+
+a=a+1;
+alias a b {
+b=b+1;
+}
+write(a);
