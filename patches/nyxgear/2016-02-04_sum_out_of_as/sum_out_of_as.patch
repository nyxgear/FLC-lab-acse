diff --git a/acse/Acse.lex b/acse/Acse.lex
index 663b2db..b9037ee 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -97,6 +97,10 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"sum"             { return SUM; }
+"out"             { return OUT; }
+"of"              { return OF; }
+"as"              { return AS; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index ec9ef8b..367d021 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -124,6 +124,7 @@ extern int yyerror(const char* errmsg);
 %token RETURN
 %token READ
 %token WRITE
+%token AS
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -133,6 +134,10 @@ extern int yyerror(const char* errmsg);
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
 
+%token <label> SUM
+%token <intval> OUT
+%token <intval> OF
+
 %type <expr> exp
 %type <decl> declaration
 %type <list> declaration_list
@@ -307,6 +312,61 @@ assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
                /* free the memory associated with the IDENTIFIER */
                free($1);
             }
+            | IDENTIFIER ASSIGN SUM IDENTIFIER COMMA IDENTIFIER OUT OF IDENTIFIER
+            {
+                t_axe_variable *res, *ivar, *jvar, *arr;
+                res = getVariable(program, $1); ivar = getVariable(program, $4);
+                jvar = getVariable(program, $6); arr = getVariable(program, $9);
+
+                if (res->isArray || ivar->isArray || jvar->isArray || !arr->isArray)
+                    notifyError(AXE_INVALID_VARIABLE);
+
+                if (arr->arraySize < 2) notifyError(AXE_INVALID_ARRAY_SIZE);
+
+                int res_reg = get_symbol_location(program, $1, 0);
+                gen_addi_instruction(program, res_reg, REG_0, 0); // set res to 0
+
+                int idxi_reg = gen_load_immediate(program, arr->arraySize-2);
+                $7 = idxi_reg;
+                int idxj_reg = gen_load_immediate(program, arr->arraySize-1);
+                $8 = idxj_reg;
+
+                $3 = assignNewLabel(program); // assign label begin loop
+
+                int iv_reg = loadArrayElement(program, arr->ID, create_expression(idxi_reg, REGISTER));
+                int jv_reg = loadArrayElement(program, arr->ID, create_expression(idxj_reg, REGISTER));
+
+                gen_add_instruction(program,
+                                    get_symbol_location(program, $4, 0),
+                                    REG_0,
+                                    iv_reg,
+                                    CG_DIRECT_ALL);
+                gen_add_instruction(program,
+                                    get_symbol_location(program, $6, 0),
+                                    REG_0,
+                                    jv_reg,
+                                    CG_DIRECT_ALL);
+            }
+            AS exp {
+                int res_reg = get_symbol_location(program, $1, 0);
+                if ($12.expression_type == IMMEDIATE)
+                    gen_addi_instruction(program, res_reg, res_reg, $12.value);
+                else
+                    gen_add_instruction(program, res_reg, res_reg, $12.value, CG_DIRECT_ALL);
+
+                gen_andb_instruction(program, $7, $7, $7, CG_DIRECT_ALL);
+                t_axe_label * end = newLabel(program);
+                gen_beq_instruction(program, end, 0);
+                gen_subi_instruction(program, $7, $7, 1);
+                gen_subi_instruction(program, $8, $8, 1);
+                gen_bt_instruction(program, $3, 0);
+                assignLabel(program, end);
+
+                free($1);
+                free($4);
+                free($6);
+                free($9);
+            }
 ;
             
 if_statement   : if_stmt
diff --git a/tests/Makefile b/tests/Makefile
index a3aed3b..7873d54 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -1,7 +1,8 @@
 asm=$(CURDIR)/../bin/asm
 acse=$(CURDIR)/../bin/acse
 export asm acse
-dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc
+dirs:=arrays sum dowhile fact mult_table power semi assign arrays arrays2 misc \
+sum_out_of_as
 
 test :
 	for i in $(dirs); do $(MAKE) -C $$i -f ../Makefile.test ; done
diff --git a/tests/sum_out_of_as/sum_out_of_as.src b/tests/sum_out_of_as/sum_out_of_as.src
new file mode 100644
index 0000000..4c89b3a
--- /dev/null
+++ b/tests/sum_out_of_as/sum_out_of_as.src
@@ -0,0 +1,15 @@
+int i,j,r,v[4];
+
+v[0]=1;
+v[1]=4;
+v[2]=5;
+v[3]=6;
+
+r = sum i,j out of v as i+j*2;
+/* r = 1+4*2 + 4+5*2 + 5+6*2 */
+/* r = 9 + 14 + 17 */
+write(r); /* expected: 40 */
+
+r = sum i,j out of v as 3*2-1;
+/* r = 5 + 5 + 5 */
+write(r); /* expected: 15 */
