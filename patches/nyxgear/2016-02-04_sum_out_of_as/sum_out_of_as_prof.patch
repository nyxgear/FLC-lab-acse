diff --git a/acse/Acse.lex b/acse/Acse.lex
index f4ad42a..abe5559 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -96,6 +96,10 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "int"             { yylval.intval = INTEGER_TYPE; return TYPE; }
 "while"           { return WHILE; }
 "return"          { return RETURN; }
+"sum"             { return SUM; }
+"out"             { return OUT; }
+"of"              { return OF; }
+"as"              { return AS; }
 "read"            { return READ; }
 "write"           { return WRITE; }
 
diff --git a/acse/Acse.y b/acse/Acse.y
index 1813e18..1ee1f3a 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -89,6 +89,10 @@ t_reg_allocator *RA;       /* Register allocator. It implements the "Linear scan
 
 t_io_infos *file_infos;    /* input and output files used by the compiler */
 
+t_axe_label *label_end,*label_cond;
+t_axe_expression counter_exp;
+int sum_reg;
+
 %}
 
 %expect 1
@@ -121,6 +125,7 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 %token RETURN
 %token READ
 %token WRITE
+%token SUM OUT OF AS
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -250,12 +255,51 @@ control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+	    | sum_out_of_statement SEMI  {                    }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
                      | write_statement { /* does nothing */ }
 ;
 
+sum_out_of_statement: IDENTIFIER ASSIGN SUM IDENTIFIER COMMA IDENTIFIER OUT OF IDENTIFIER AS {
+                        int first_reg,second_reg,counter_reg;
+                        t_axe_variable *array;
+
+			array=getVariable(program,$9);
+			if (!array->isArray){
+			  exit(1);
+			}
+			int result_location=get_symbol_location(program, $1,0);
+                        gen_addi_instruction(program,result_location,REG_0,0);
+
+                        counter_reg=gen_load_immediate(program, array->arraySize - 2);
+                        counter_exp=create_expression(counter_reg,REGISTER);
+
+                        label_end = newLabel(program);
+			label_cond=assignNewLabel(program);
+			gen_andb_instruction(program, counter_reg,counter_reg,counter_reg,CG_DIRECT_ALL);
+			gen_blt_instruction(program,label_end,0);
+			
+			first_reg= loadArrayElement(program, $9, counter_exp);
+			gen_addi_instruction(program,counter_reg,counter_reg,1);
+                        second_reg = loadArrayElement(program, $9, counter_exp);
+			
+			gen_subi_instruction(program,counter_reg,counter_reg,2);
+                        gen_addi_instruction(program,get_symbol_location(program,$4,0), first_reg,0);
+			gen_addi_instruction(program,get_symbol_location(program,$6,0), second_reg,0);
+		      } exp {
+		        int sum_reg=get_symbol_location(program, $1,0);
+		        if ($12.expression_type == IMMEDIATE) {
+			  gen_addi_instruction(program, sum_reg, sum_reg, $12.value);
+			} else {
+			  gen_add_instruction(program, sum_reg, sum_reg, $12.value, CG_DIRECT_ALL);
+			}
+		        gen_bt_instruction(program, label_cond,0);
+			assignLabel(program,label_end);
+		      };
+
+
 assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
             {
                /* Notify to `program' that the value $6
