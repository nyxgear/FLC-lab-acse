diff -Naur acse_1.1.1/acse/Acse.lex acse_1.1.1_20160225/acse/Acse.lex
--- acse_1.1.1/acse/Acse.lex	2016-02-02 23:05:13.000000000 +0100
+++ acse_1.1.1_20160225/acse/Acse.lex	2016-02-23 14:25:37.280368007 +0100
@@ -98,6 +98,9 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"protect"         { return PROTECT; }
+"with"			  { return WITH; }
+
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff -Naur acse_1.1.1/acse/Acse.y acse_1.1.1_20160225/acse/Acse.y
--- acse_1.1.1/acse/Acse.y	2016-02-02 23:05:13.000000000 +0100
+++ acse_1.1.1_20160225/acse/Acse.y	2016-02-24 16:50:06.361137103 +0100
@@ -89,9 +89,11 @@
 
 t_io_infos *file_infos;    /* input and output files used by the compiler */
 
+t_list *protectStack = NULL;
+
 %}
 
-%expect 1
+%expect 2
 
 /*=========================================================================
                           SEMANTIC RECORDS
@@ -129,12 +131,15 @@
 %token <intval> TYPE
 %token <svalue> IDENTIFIER
 %token <intval> NUMBER
+%token <label> PROTECT
+%token <label> WITH
 
 %type <expr> exp
 %type <decl> declaration
 %type <list> declaration_list
 %type <label> if_stmt
 
+
 /*=========================================================================
                           OPERATOR PRECEDENCES
  =========================================================================*/
@@ -250,6 +255,7 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+			| protect_statement          { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -348,6 +354,37 @@
                code_block { $$ = $1; }
 ;
 
+
+protect_statement  : protect_stmt
+			       {
+                      t_axe_label *l = newLabel(program);
+			          gen_bt_instruction (program, l, 0);
+			          assignLabel(program, (t_axe_label *)LDATA(getElementAt(protectStack,0)));
+              		  gen_halt_instruction(program);
+					  protectStack = removeFirst(protectStack);
+					  assignLabel(program, l);
+			       }
+			       | protect_stmt WITH
+			       {
+			          $2 = newLabel(program);
+			          gen_bt_instruction (program, $2, 0);	   
+			          assignLabel(program, (t_axe_label *)LDATA(getElementAt(protectStack,0)));
+					  protectStack = removeFirst(protectStack);
+			       }
+			       code_block
+			       {					  
+			          assignLabel(program, $2);
+			       }
+;
+            
+protect_stmt  :  PROTECT
+                 {
+		            protectStack = addFirst(protectStack, newLabel(program)); 			
+                 }
+                 code_block { }
+; 
+
+
 while_statement  : WHILE
                   {
                      /* initialize the value of the non-terminal */
@@ -522,6 +559,12 @@
                            $$ = handle_bin_numeric_op(program, $1, $3, MUL);
    }
    | exp DIV_OP exp     {
+						   if (protectStack){
+							   int r = getNewRegister(program);
+							   gen_addi_instruction(program, r, REG_0, 0);
+   							   handle_binary_comparison (program, $3, create_expression(r, REGISTER), _EQ_);						   
+							   gen_bne_instruction(program, (t_axe_label *)LDATA(getElementAt(protectStack,0)),0);
+						   }
                            $$ = handle_bin_numeric_op(program, $1, $3, DIV);
    }
    | exp LT exp      {
