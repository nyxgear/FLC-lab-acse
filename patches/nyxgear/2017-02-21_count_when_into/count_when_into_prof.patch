diff -Naur acse_1.1.1/acse/Acse.lex acse_1.1.1_count_when/acse/Acse.lex
--- acse_1.1.1/acse/Acse.lex	2016-02-02 23:05:13.000000000 +0100
+++ acse_1.1.1_count_when/acse/Acse.lex	2017-02-17 18:57:34.660593647 +0100
@@ -98,7 +98,9 @@
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
-
+"count"           { return COUNT; }
+"when"            { return WHEN; }
+"into"            { return INTO; }
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
                     return(NUMBER); }
diff -Naur acse_1.1.1/acse/Acse.y acse_1.1.1_count_when/acse/Acse.y
--- acse_1.1.1/acse/Acse.y	2016-02-02 23:05:13.000000000 +0100
+++ acse_1.1.1_count_when/acse/Acse.y	2017-02-17 19:36:47.699698639 +0100
@@ -105,6 +105,7 @@
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
+   t_when_statement when_stmt;
 } 
 /*=========================================================================
                                TOKENS 
@@ -121,6 +122,8 @@
 %token RETURN
 %token READ
 %token WRITE
+%token COUNT INTO
+%token <when_stmt> WHEN
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -134,7 +137,8 @@
 %type <decl> declaration
 %type <list> declaration_list
 %type <label> if_stmt
-
+%type <intval> when_block
+%type <intval> when_list
 /*=========================================================================
                           OPERATOR PRECEDENCES
  =========================================================================*/
@@ -250,6 +254,7 @@
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+	    | count_statement            { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -348,6 +353,34 @@
                code_block { $$ = $1; }
 ;
 
+count_statement: COUNT LBRACE when_list RBRACE INTO IDENTIFIER {
+                   gen_add_instruction(program,get_symbol_location(program,$6,0),$3,REG_0,CG_DIRECT_ALL);
+	         };
+
+when_list: when_list COMMA when_block {
+             $$ = $1;
+	     gen_add_instruction(program, $1,$1,$3,CG_DIRECT_ALL);
+           }  
+         | when_block {
+	     $$ = $1;
+	 };
+
+when_block: WHEN LPAR exp RPAR {
+              t_axe_expression normalized = $3;
+	      if($3.expression_type == IMMEDIATE) {
+	         normalized.value = gen_load_immediate(program, $3.value);
+		 normalized.expression_type = REGISTER;
+	      } 
+	      t_axe_expression sum = handle_binary_comparison(program, normalized , create_expression(0,IMMEDIATE) ,_GT_);
+	      $1.reg = sum.value;
+	      $1.bypass = newLabel(program);
+              gen_beq_instruction(program, $1.bypass,0);
+	    } code_block {
+	      $$ = $1.reg;
+	      assignLabel(program, $1.bypass);
+	    };
+
+
 while_statement  : WHILE
                   {
                      /* initialize the value of the non-terminal */
diff -Naur acse_1.1.1/acse/axe_struct.h acse_1.1.1_count_when/acse/axe_struct.h
--- acse_1.1.1/acse/axe_struct.h	2016-02-02 19:26:33.000000000 +0100
+++ acse_1.1.1_count_when/acse/axe_struct.h	2017-02-17 19:19:35.589652587 +0100
@@ -114,6 +114,12 @@
                                     * that follows the while construct */
 } t_while_statement;
 
+typedef struct t_when_statement
+{
+   int reg;
+   t_axe_label *bypass;
+} t_when_statement;
+
 /* create a label */
 extern t_axe_label * alloc_label(int value);
 
diff -Naur acse_1.1.1/tests/count/count.axe acse_1.1.1_count_when/tests/count/count.axe
--- acse_1.1.1/tests/count/count.axe	1970-01-01 01:00:00.000000000 +0100
+++ acse_1.1.1_count_when/tests/count/count.axe	2017-02-17 19:36:15.030697182 +0100
@@ -0,0 +1,8 @@
+int a=2 ,b=3;
+count {
+  when (7) {
+    write(1);
+  }
+} into a;
+
+write(a);
